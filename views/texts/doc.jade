extends ../layout

block head
	link(rel='stylesheet', href='/css/views/texts/doc.css') 
	script(src='/js/views/texts/doc.js')
block header
	div.row-fluid
		div.span8.offset4#header
			h1= title
block content
	section.row-fluid.span2.offset1#textDocumentationNav
		ul.nav.nav-tabs.nav-stacked.navbar-static-top
			li.active
				a(href='#general') General
					i.icon-chevron-right
			li
				a(href='#shingles') Shingles
					i.icon-chevron-right
			li
				a(href='#minhash') MinHash
					i.icon-chevron-right
			li 
				a(href='#search') Search
					i.icon-chevron-right
			li
				a(href='#register') Register
					i.icon-chevron-right
	section.row-fluid.span6#textDocumentationContent
		section
			a(name='general').DocumentHeader General
			section(name='general-overview')
				header Overview
				article
					P
						| Creative Commons Media-Fingerprint (CCMF) library allows you to upload your textual content and it would scan
						| the web for similar contents. It would highlight these similar content and flag them to the uploader shown in the Search
						| function in Fig 1.
					img(src='http://ccmf.s3.amazonaws.com/img/views/texts/doc/general-aim1.png').img-polaroid
					div.row-fluid
						span.span2.offset6 Fig 1
					p
						| The inner workings behind CCMF is based on <a href='http://infolab.stanford.edu/~ullman/mmds.html'>Finding Similar Items </a>
						| authored by Anand Rajaraman and Jeff Ullman. Here we would summerise into three steps, shingles extraction, minhash and 
						| locality-sensitive hashing. CCMF's implementation is modified for the distributed nature of search and storing, although the 
						| methodology remains loyal to Rajaraman/Jeff.
					img(src='http://ccmf.s3.amazonaws.com/img/views/texts/doc/general-working1.png').img-polaroid
					div.row-fluid
						span.span2.offset6 Fig 2
					p
						| Firstly, the text content is submitted through a shingles extractor, which breaks the text into k length word tokens. There are 
						| different schemes within the library to determine the length and extraction method of each shingles. Afterwards, the set of shingles
						| would be send through a minhash signature generator, which compress the text size to it's signature size. The reason for minhash is to
						| reduce the size for comparison while preserving the intrinsic relationship between each documents. Now we are ready to determine the
						| similarity between any two documents that go through this process. However, usually we are more concern on finding the similar items
						| based on a given article. Thus, locality-sensitive hashing is used to break the signatures into many parts. The grand idea is that
						| given an unknown text, we can break it up as well and compare each parts with the upload text. If any of the parts coincided, then we 
						| conclude that they are similar enough to be candidate pairs.
			section(name='general-usage')
				header Usage
				article
					P 
						| To begin, please <a href='/infos/installation'>install</a> ccmf library. The installation can be on the node.js or on the client browser.
						| Next, create a ccmf library object. 
						| <code> var textMod = ccmf.Text.create(); </code>
		section
			a(name='shingles').DocumentHeader Shingles
			section(name='shingles-overview')
				header Overview
				article
					P
						| Shingles means substring of length k. The first step is to conducting shingles extraction, or substring extraction from the target textual content.
						| You can indicate the number of characters to extract via function parameters. After extraction, compression is required to reduce the data size
						| for further processing. Hence, we would reduce each shingles to a 32 bit integer.
			section(name='shingles-usage')
				header Usage
				article
					P
						| Here we are extracting shingles of length 9 from the text.<br/>
						| <code> var textAShingles = textMod.removedStopWordShingles(rawTextA,9); </code><br/>
						| Next, each shingles with the textAShingles array would be compress into 32 bits integer.<br/>
						| <code> var shinglesFingerprintText = textMod.shinglesFingerprintConv(textAShingles); </code>
			section(name='shingles-modes')
				header Modes
				article
					P
						| There are three different modes for shingles extraction. There are different based on whether to consider stop words, common words in the English
						| vocabulary, and the method of extractions. Different mode of extraction would affect the speed of extraction and performance of the end result.
					ul#typesOfShinglesModes
						li 
							header Fixed Shingles
							article 
								P
									| The most basic shingles extraction. Simply extract each shingles of substring length k from the beginning to the end of text.<br/>
									| <code>  var textAShingles = textMod.fixedShinglesWithoutWS(rawText,9); </code>
						li 
							header Remove Stop Words Shingles
							article 
								P
									| Perform a removal of all stop words before conducting Fixed Shingles extraction.<br/> 
									| <code>  var textAShingles = textMod.removedStopWordShingles(rawText,9); </code>
						li 
							header Stop More After Stop Word Shingles
							article
								P
									| This is a different methodology of extractions. Each shingles are two words after the encountering of a stop word.<br/>
									| <code>  var textAShingles = textMod.stopMoreShingles(rawText,9); </code>
		section
			a(name='minhash').DocumentHeader MinHash
			section(name='minhash-overview')
				header Overview
				article
					P
						| Minhash is a technique or process of compressing the amount of data actually needed for comparison while preserving their inherit
						| relationship with each other. There are more information on <a href='http://en.wikipedia.org/wiki/MinHash'>Wikipedia</a> or for
						| a more detailed explanation, read <a href='http://infolab.stanford.edu/~ullman/mmds/ch3.pdf'>Finding Similar Items</a>.
			section(name='minhash-usage')
				header Usage
				article
					P 
						| <code> var signatures[0] = shinglesFingerprintText; </code><br/>
						| The previous compressed integer array could be loaded into an array of signatures. 
						| Use this array of signature if you would like to perform similar text matching solely on the browser.
						| You can add N signatures to this signature array.<br/>
						| <code> var signatures[1] = shinglesFingerprintText; </code><br/>
						| <code> var signatures[2] = shinglesFingerprintText; </code><br/>
						| <code> var signatures[3] = shinglesFingerprintText; </code><br/>
						| Now it would be ready to generate a N minhash signature, given N fingerprint signatures.<br/>
						| <code> var minHashSignature = textMod.minHashSignaturesGen(signatures); </code>
		section
			a(name='search').DocumentHeader Search
			section(name='search-overview')
				header Overview
				article
					P
						| To compare each and every pair of minhash signatures to determine the most similar pair would be too inefficient. 
						| Normally for this use case, we only need to focus on pairs of signatures that are most likely to be similar and
						| not on every pair. The search functions uses the underlying locality-sensitive hashing (LSH).
						| The art of locality-sensitive hashing is that through multiple hashing of a minhash signature,
						| eventually the similar text content would be hashed to the same location.
			section(name='search-usage')
				header Usage
				article
					P
						| The LSH belongs to the data module and so we have to first create the data module object. <br/>
						| <code> var dataMod = ccmf.Data.create(); </code><br/>
						| Next, create the callback to process the return data.
						| <code><br/>
						| callback :function(snapshot){						<br/>
						| &nbsp;&nbsp;&nbsp;/* Search through each band */					<br/>
						| &nbsp;&nbsp;&nbsp;if(snapshot.val()!=null){						<br/>
						| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var foundSignatureSet = snapshot.val();		<br/>
						| &nbsp;&nbsp;}												<br/>
						| }													
						| </code>											<br/>
						| Call the method in data module to conduct LSH. 
						| <code> dataMod.conductLsh(minHashSignature,obj.callback); </code>
						| The callback function would be called and the similar minhash signatures would be returned.
		section
			a(name='register').DocumentHeader Register
			section(name='register-overview')
				header Overview
				article
					P
						| To be able automatically scan by others for similar text content, one has to register their textual content first.
						| We can load a single minhash signatures into the database. Once successfully stored, a subsequent <a href='#search'>search</a> would
						| detect this similarity. 
			section(name='register-usage')
				header Usage
				article
					code 
						| dataMod.storeLsh(minHashSignature,null,null);
					P
						| The minhashSignature would be split into bands by LSH and individually stored.